/**
 * Based on https://github.com/spring-projects/spring-framework/blob/master/gradle/jdiff.gradle
 *
 * Generate a JDiff report between the current version and an older version.
 *
 * Usage:
 *  ./gradlew jdiff -D OLD_VERSION=3.1.3 -D OLD_VERSION_ROOT=/path/to/3.1.3 
 *
 * View generated report at:
 *  build/reports/jdiff/changes.html
 *
 * @param OLD_VERSION required
 * @param OLD_VERSION_ROOT required, typically pointing to a separate git clone dir
 * @param PROJECT_NAME optional, defaults to `project.name`
 * @param SUBDIR_PREFIX optional, defaults to ""
 */
import java.nio.file.Paths

task jdiff {
  description = "Generates a JDiff report"
  group = "Documentation"

  def jdiffHome = Paths.get(CONFIG.configDir, 'documentation', 'jdiff', 'jdiff-home').toString()

  ant.taskdef(
    name: "jdiff",
    classname: "jdiff.JDiffAntTask",
    classpath: "${jdiffHome}/antjdiff.jar")

  def currentVersion = project.version
  def currentVersionRoot = project.rootDir

  def oldVersion = System.getProperty("OLD_VERSION")
  def oldVersionRoot = System.getProperty("OLD_VERSION_ROOT")
  def projectName = System.getProperty("PROJECT_NAME") ?: project.name
  def subdirPrefix = System.getProperty("SUBDIR_PREFIX") ?: ""

  def outputDir = Paths.get("$project.buildDir", 'reports', 'jdiff', "${oldVersion}_to_${currentVersion}").toString()

  doLast {
    if (oldVersion == null) {
      throw new IllegalArgumentException('Set OLD_VERSION property to indicate older of the two versions being compared')
    }
    if (oldVersionRoot == null) {
      throw new IllegalArgumentException("Set OLD_VERSION_ROOT property to indicate the root directory for ${oldVersion}")
    }

    oldVersionRoot = new File(oldVersionRoot)

    ant.property(name: "JDIFF_HOME", value: jdiffHome)
    ant.mkdir(dir: outputDir)
    ant.jdiff(
        destdir: outputDir,
        source: "1.8",
        verbose: "off",
        stats: "on",
        docchanges: "off") {
      old(name: "${project.name} ${oldVersion}") {
        oldVersionRoot.eachDirMatch({ it ==~ ("${subdirPrefix}.*") }) { 
          it.eachDirRecurse {
            if (it.path ==~ '.*/src/main/java$') {
              dirset(dir: it.path, includes: "**")
            }
          }
        } 
      }
      "new"(name: "${project.name} ${currentVersion}") {
        currentVersionRoot.eachDirMatch({ it ==~ ("${subdirPrefix}.*") }) { 
          it.eachDirRecurse {
            if (it.path ==~ '.*/src/main/java$') {
              dirset(dir: it.path, includes: "**")
            }
          }
        }
      }
    }
  }
}